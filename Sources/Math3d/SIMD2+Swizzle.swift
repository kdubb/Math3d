// Autogenerated - Math3d::Gen - 2020-03-15 17:08:06 +0000


extension SIMD2 where Scalar: ExpressibleByIntegerLiteral {
  public var xx: SIMD2<Scalar> { SIMD2<Scalar>(x, x) }
  public var xy: SIMD2<Scalar> { get { SIMD2<Scalar>(x, y) } set { x = newValue.x; y = newValue.y } }
  public var xz: SIMD2<Scalar> { SIMD2<Scalar>(x, z) }
  public var xw: SIMD2<Scalar> { SIMD2<Scalar>(x, w) }
  public var yx: SIMD2<Scalar> { get { SIMD2<Scalar>(y, x) } set { y = newValue.x; x = newValue.y } }
  public var yy: SIMD2<Scalar> { SIMD2<Scalar>(y, y) }
  public var yz: SIMD2<Scalar> { SIMD2<Scalar>(y, z) }
  public var yw: SIMD2<Scalar> { SIMD2<Scalar>(y, w) }
  public var zx: SIMD2<Scalar> { SIMD2<Scalar>(z, x) }
  public var zy: SIMD2<Scalar> { SIMD2<Scalar>(z, y) }
  public var zz: SIMD2<Scalar> { SIMD2<Scalar>(z, z) }
  public var zw: SIMD2<Scalar> { SIMD2<Scalar>(z, w) }
  public var wx: SIMD2<Scalar> { SIMD2<Scalar>(w, x) }
  public var wy: SIMD2<Scalar> { SIMD2<Scalar>(w, y) }
  public var wz: SIMD2<Scalar> { SIMD2<Scalar>(w, z) }
  public var ww: SIMD2<Scalar> { SIMD2<Scalar>(w, w) }

  public var rr: SIMD2<Scalar> { SIMD2<Scalar>(r, r) }
  public var rg: SIMD2<Scalar> { get { SIMD2<Scalar>(r, g) } set { r = newValue.x; g = newValue.y } }
  public var rb: SIMD2<Scalar> { SIMD2<Scalar>(r, b) }
  public var ra: SIMD2<Scalar> { SIMD2<Scalar>(r, a) }
  public var gr: SIMD2<Scalar> { get { SIMD2<Scalar>(g, r) } set { g = newValue.x; r = newValue.y } }
  public var gg: SIMD2<Scalar> { SIMD2<Scalar>(g, g) }
  public var gb: SIMD2<Scalar> { SIMD2<Scalar>(g, b) }
  public var ga: SIMD2<Scalar> { SIMD2<Scalar>(g, a) }
  public var br: SIMD2<Scalar> { SIMD2<Scalar>(b, r) }
  public var bg: SIMD2<Scalar> { SIMD2<Scalar>(b, g) }
  public var bb: SIMD2<Scalar> { SIMD2<Scalar>(b, b) }
  public var ba: SIMD2<Scalar> { SIMD2<Scalar>(b, a) }
  public var ar: SIMD2<Scalar> { SIMD2<Scalar>(a, r) }
  public var ag: SIMD2<Scalar> { SIMD2<Scalar>(a, g) }
  public var ab: SIMD2<Scalar> { SIMD2<Scalar>(a, b) }
  public var aa: SIMD2<Scalar> { SIMD2<Scalar>(a, a) }

  public var ss: SIMD2<Scalar> { SIMD2<Scalar>(s, s) }
  public var st: SIMD2<Scalar> { get { SIMD2<Scalar>(s, t) } set { s = newValue.x; t = newValue.y } }
  public var sp: SIMD2<Scalar> { SIMD2<Scalar>(s, p) }
  public var sq: SIMD2<Scalar> { SIMD2<Scalar>(s, q) }
  public var ts: SIMD2<Scalar> { get { SIMD2<Scalar>(t, s) } set { t = newValue.x; s = newValue.y } }
  public var tt: SIMD2<Scalar> { SIMD2<Scalar>(t, t) }
  public var tp: SIMD2<Scalar> { SIMD2<Scalar>(t, p) }
  public var tq: SIMD2<Scalar> { SIMD2<Scalar>(t, q) }
  public var ps: SIMD2<Scalar> { SIMD2<Scalar>(p, s) }
  public var pt: SIMD2<Scalar> { SIMD2<Scalar>(p, t) }
  public var pp: SIMD2<Scalar> { SIMD2<Scalar>(p, p) }
  public var pq: SIMD2<Scalar> { SIMD2<Scalar>(p, q) }
  public var qs: SIMD2<Scalar> { SIMD2<Scalar>(q, s) }
  public var qt: SIMD2<Scalar> { SIMD2<Scalar>(q, t) }
  public var qp: SIMD2<Scalar> { SIMD2<Scalar>(q, p) }
  public var qq: SIMD2<Scalar> { SIMD2<Scalar>(q, q) }


  public var xxx: SIMD3<Scalar> { SIMD3<Scalar>(x, x, x) }
  public var xxy: SIMD3<Scalar> { SIMD3<Scalar>(x, x, y) }
  public var xxz: SIMD3<Scalar> { SIMD3<Scalar>(x, x, z) }
  public var xxw: SIMD3<Scalar> { SIMD3<Scalar>(x, x, w) }
  public var xyx: SIMD3<Scalar> { SIMD3<Scalar>(x, y, x) }
  public var xyy: SIMD3<Scalar> { SIMD3<Scalar>(x, y, y) }
  public var xyz: SIMD3<Scalar> { SIMD3<Scalar>(x, y, z) }
  public var xyw: SIMD3<Scalar> { SIMD3<Scalar>(x, y, w) }
  public var xzx: SIMD3<Scalar> { SIMD3<Scalar>(x, z, x) }
  public var xzy: SIMD3<Scalar> { SIMD3<Scalar>(x, z, y) }
  public var xzz: SIMD3<Scalar> { SIMD3<Scalar>(x, z, z) }
  public var xzw: SIMD3<Scalar> { SIMD3<Scalar>(x, z, w) }
  public var xwx: SIMD3<Scalar> { SIMD3<Scalar>(x, w, x) }
  public var xwy: SIMD3<Scalar> { SIMD3<Scalar>(x, w, y) }
  public var xwz: SIMD3<Scalar> { SIMD3<Scalar>(x, w, z) }
  public var xww: SIMD3<Scalar> { SIMD3<Scalar>(x, w, w) }
  public var yxx: SIMD3<Scalar> { SIMD3<Scalar>(y, x, x) }
  public var yxy: SIMD3<Scalar> { SIMD3<Scalar>(y, x, y) }
  public var yxz: SIMD3<Scalar> { SIMD3<Scalar>(y, x, z) }
  public var yxw: SIMD3<Scalar> { SIMD3<Scalar>(y, x, w) }
  public var yyx: SIMD3<Scalar> { SIMD3<Scalar>(y, y, x) }
  public var yyy: SIMD3<Scalar> { SIMD3<Scalar>(y, y, y) }
  public var yyz: SIMD3<Scalar> { SIMD3<Scalar>(y, y, z) }
  public var yyw: SIMD3<Scalar> { SIMD3<Scalar>(y, y, w) }
  public var yzx: SIMD3<Scalar> { SIMD3<Scalar>(y, z, x) }
  public var yzy: SIMD3<Scalar> { SIMD3<Scalar>(y, z, y) }
  public var yzz: SIMD3<Scalar> { SIMD3<Scalar>(y, z, z) }
  public var yzw: SIMD3<Scalar> { SIMD3<Scalar>(y, z, w) }
  public var ywx: SIMD3<Scalar> { SIMD3<Scalar>(y, w, x) }
  public var ywy: SIMD3<Scalar> { SIMD3<Scalar>(y, w, y) }
  public var ywz: SIMD3<Scalar> { SIMD3<Scalar>(y, w, z) }
  public var yww: SIMD3<Scalar> { SIMD3<Scalar>(y, w, w) }
  public var zxx: SIMD3<Scalar> { SIMD3<Scalar>(z, x, x) }
  public var zxy: SIMD3<Scalar> { SIMD3<Scalar>(z, x, y) }
  public var zxz: SIMD3<Scalar> { SIMD3<Scalar>(z, x, z) }
  public var zxw: SIMD3<Scalar> { SIMD3<Scalar>(z, x, w) }
  public var zyx: SIMD3<Scalar> { SIMD3<Scalar>(z, y, x) }
  public var zyy: SIMD3<Scalar> { SIMD3<Scalar>(z, y, y) }
  public var zyz: SIMD3<Scalar> { SIMD3<Scalar>(z, y, z) }
  public var zyw: SIMD3<Scalar> { SIMD3<Scalar>(z, y, w) }
  public var zzx: SIMD3<Scalar> { SIMD3<Scalar>(z, z, x) }
  public var zzy: SIMD3<Scalar> { SIMD3<Scalar>(z, z, y) }
  public var zzz: SIMD3<Scalar> { SIMD3<Scalar>(z, z, z) }
  public var zzw: SIMD3<Scalar> { SIMD3<Scalar>(z, z, w) }
  public var zwx: SIMD3<Scalar> { SIMD3<Scalar>(z, w, x) }
  public var zwy: SIMD3<Scalar> { SIMD3<Scalar>(z, w, y) }
  public var zwz: SIMD3<Scalar> { SIMD3<Scalar>(z, w, z) }
  public var zww: SIMD3<Scalar> { SIMD3<Scalar>(z, w, w) }
  public var wxx: SIMD3<Scalar> { SIMD3<Scalar>(w, x, x) }
  public var wxy: SIMD3<Scalar> { SIMD3<Scalar>(w, x, y) }
  public var wxz: SIMD3<Scalar> { SIMD3<Scalar>(w, x, z) }
  public var wxw: SIMD3<Scalar> { SIMD3<Scalar>(w, x, w) }
  public var wyx: SIMD3<Scalar> { SIMD3<Scalar>(w, y, x) }
  public var wyy: SIMD3<Scalar> { SIMD3<Scalar>(w, y, y) }
  public var wyz: SIMD3<Scalar> { SIMD3<Scalar>(w, y, z) }
  public var wyw: SIMD3<Scalar> { SIMD3<Scalar>(w, y, w) }
  public var wzx: SIMD3<Scalar> { SIMD3<Scalar>(w, z, x) }
  public var wzy: SIMD3<Scalar> { SIMD3<Scalar>(w, z, y) }
  public var wzz: SIMD3<Scalar> { SIMD3<Scalar>(w, z, z) }
  public var wzw: SIMD3<Scalar> { SIMD3<Scalar>(w, z, w) }
  public var wwx: SIMD3<Scalar> { SIMD3<Scalar>(w, w, x) }
  public var wwy: SIMD3<Scalar> { SIMD3<Scalar>(w, w, y) }
  public var wwz: SIMD3<Scalar> { SIMD3<Scalar>(w, w, z) }
  public var www: SIMD3<Scalar> { SIMD3<Scalar>(w, w, w) }

  public var rrr: SIMD3<Scalar> { SIMD3<Scalar>(r, r, r) }
  public var rrg: SIMD3<Scalar> { SIMD3<Scalar>(r, r, g) }
  public var rrb: SIMD3<Scalar> { SIMD3<Scalar>(r, r, b) }
  public var rra: SIMD3<Scalar> { SIMD3<Scalar>(r, r, a) }
  public var rgr: SIMD3<Scalar> { SIMD3<Scalar>(r, g, r) }
  public var rgg: SIMD3<Scalar> { SIMD3<Scalar>(r, g, g) }
  public var rgb: SIMD3<Scalar> { SIMD3<Scalar>(r, g, b) }
  public var rga: SIMD3<Scalar> { SIMD3<Scalar>(r, g, a) }
  public var rbr: SIMD3<Scalar> { SIMD3<Scalar>(r, b, r) }
  public var rbg: SIMD3<Scalar> { SIMD3<Scalar>(r, b, g) }
  public var rbb: SIMD3<Scalar> { SIMD3<Scalar>(r, b, b) }
  public var rba: SIMD3<Scalar> { SIMD3<Scalar>(r, b, a) }
  public var rar: SIMD3<Scalar> { SIMD3<Scalar>(r, a, r) }
  public var rag: SIMD3<Scalar> { SIMD3<Scalar>(r, a, g) }
  public var rab: SIMD3<Scalar> { SIMD3<Scalar>(r, a, b) }
  public var raa: SIMD3<Scalar> { SIMD3<Scalar>(r, a, a) }
  public var grr: SIMD3<Scalar> { SIMD3<Scalar>(g, r, r) }
  public var grg: SIMD3<Scalar> { SIMD3<Scalar>(g, r, g) }
  public var grb: SIMD3<Scalar> { SIMD3<Scalar>(g, r, b) }
  public var gra: SIMD3<Scalar> { SIMD3<Scalar>(g, r, a) }
  public var ggr: SIMD3<Scalar> { SIMD3<Scalar>(g, g, r) }
  public var ggg: SIMD3<Scalar> { SIMD3<Scalar>(g, g, g) }
  public var ggb: SIMD3<Scalar> { SIMD3<Scalar>(g, g, b) }
  public var gga: SIMD3<Scalar> { SIMD3<Scalar>(g, g, a) }
  public var gbr: SIMD3<Scalar> { SIMD3<Scalar>(g, b, r) }
  public var gbg: SIMD3<Scalar> { SIMD3<Scalar>(g, b, g) }
  public var gbb: SIMD3<Scalar> { SIMD3<Scalar>(g, b, b) }
  public var gba: SIMD3<Scalar> { SIMD3<Scalar>(g, b, a) }
  public var gar: SIMD3<Scalar> { SIMD3<Scalar>(g, a, r) }
  public var gag: SIMD3<Scalar> { SIMD3<Scalar>(g, a, g) }
  public var gab: SIMD3<Scalar> { SIMD3<Scalar>(g, a, b) }
  public var gaa: SIMD3<Scalar> { SIMD3<Scalar>(g, a, a) }
  public var brr: SIMD3<Scalar> { SIMD3<Scalar>(b, r, r) }
  public var brg: SIMD3<Scalar> { SIMD3<Scalar>(b, r, g) }
  public var brb: SIMD3<Scalar> { SIMD3<Scalar>(b, r, b) }
  public var bra: SIMD3<Scalar> { SIMD3<Scalar>(b, r, a) }
  public var bgr: SIMD3<Scalar> { SIMD3<Scalar>(b, g, r) }
  public var bgg: SIMD3<Scalar> { SIMD3<Scalar>(b, g, g) }
  public var bgb: SIMD3<Scalar> { SIMD3<Scalar>(b, g, b) }
  public var bga: SIMD3<Scalar> { SIMD3<Scalar>(b, g, a) }
  public var bbr: SIMD3<Scalar> { SIMD3<Scalar>(b, b, r) }
  public var bbg: SIMD3<Scalar> { SIMD3<Scalar>(b, b, g) }
  public var bbb: SIMD3<Scalar> { SIMD3<Scalar>(b, b, b) }
  public var bba: SIMD3<Scalar> { SIMD3<Scalar>(b, b, a) }
  public var bar: SIMD3<Scalar> { SIMD3<Scalar>(b, a, r) }
  public var bag: SIMD3<Scalar> { SIMD3<Scalar>(b, a, g) }
  public var bab: SIMD3<Scalar> { SIMD3<Scalar>(b, a, b) }
  public var baa: SIMD3<Scalar> { SIMD3<Scalar>(b, a, a) }
  public var arr: SIMD3<Scalar> { SIMD3<Scalar>(a, r, r) }
  public var arg: SIMD3<Scalar> { SIMD3<Scalar>(a, r, g) }
  public var arb: SIMD3<Scalar> { SIMD3<Scalar>(a, r, b) }
  public var ara: SIMD3<Scalar> { SIMD3<Scalar>(a, r, a) }
  public var agr: SIMD3<Scalar> { SIMD3<Scalar>(a, g, r) }
  public var agg: SIMD3<Scalar> { SIMD3<Scalar>(a, g, g) }
  public var agb: SIMD3<Scalar> { SIMD3<Scalar>(a, g, b) }
  public var aga: SIMD3<Scalar> { SIMD3<Scalar>(a, g, a) }
  public var abr: SIMD3<Scalar> { SIMD3<Scalar>(a, b, r) }
  public var abg: SIMD3<Scalar> { SIMD3<Scalar>(a, b, g) }
  public var abb: SIMD3<Scalar> { SIMD3<Scalar>(a, b, b) }
  public var aba: SIMD3<Scalar> { SIMD3<Scalar>(a, b, a) }
  public var aar: SIMD3<Scalar> { SIMD3<Scalar>(a, a, r) }
  public var aag: SIMD3<Scalar> { SIMD3<Scalar>(a, a, g) }
  public var aab: SIMD3<Scalar> { SIMD3<Scalar>(a, a, b) }
  public var aaa: SIMD3<Scalar> { SIMD3<Scalar>(a, a, a) }

  public var sss: SIMD3<Scalar> { SIMD3<Scalar>(s, s, s) }
  public var sst: SIMD3<Scalar> { SIMD3<Scalar>(s, s, t) }
  public var ssp: SIMD3<Scalar> { SIMD3<Scalar>(s, s, p) }
  public var ssq: SIMD3<Scalar> { SIMD3<Scalar>(s, s, q) }
  public var sts: SIMD3<Scalar> { SIMD3<Scalar>(s, t, s) }
  public var stt: SIMD3<Scalar> { SIMD3<Scalar>(s, t, t) }
  public var stp: SIMD3<Scalar> { SIMD3<Scalar>(s, t, p) }
  public var stq: SIMD3<Scalar> { SIMD3<Scalar>(s, t, q) }
  public var sps: SIMD3<Scalar> { SIMD3<Scalar>(s, p, s) }
  public var spt: SIMD3<Scalar> { SIMD3<Scalar>(s, p, t) }
  public var spp: SIMD3<Scalar> { SIMD3<Scalar>(s, p, p) }
  public var spq: SIMD3<Scalar> { SIMD3<Scalar>(s, p, q) }
  public var sqs: SIMD3<Scalar> { SIMD3<Scalar>(s, q, s) }
  public var sqt: SIMD3<Scalar> { SIMD3<Scalar>(s, q, t) }
  public var sqp: SIMD3<Scalar> { SIMD3<Scalar>(s, q, p) }
  public var sqq: SIMD3<Scalar> { SIMD3<Scalar>(s, q, q) }
  public var tss: SIMD3<Scalar> { SIMD3<Scalar>(t, s, s) }
  public var tst: SIMD3<Scalar> { SIMD3<Scalar>(t, s, t) }
  public var tsp: SIMD3<Scalar> { SIMD3<Scalar>(t, s, p) }
  public var tsq: SIMD3<Scalar> { SIMD3<Scalar>(t, s, q) }
  public var tts: SIMD3<Scalar> { SIMD3<Scalar>(t, t, s) }
  public var ttt: SIMD3<Scalar> { SIMD3<Scalar>(t, t, t) }
  public var ttp: SIMD3<Scalar> { SIMD3<Scalar>(t, t, p) }
  public var ttq: SIMD3<Scalar> { SIMD3<Scalar>(t, t, q) }
  public var tps: SIMD3<Scalar> { SIMD3<Scalar>(t, p, s) }
  public var tpt: SIMD3<Scalar> { SIMD3<Scalar>(t, p, t) }
  public var tpp: SIMD3<Scalar> { SIMD3<Scalar>(t, p, p) }
  public var tpq: SIMD3<Scalar> { SIMD3<Scalar>(t, p, q) }
  public var tqs: SIMD3<Scalar> { SIMD3<Scalar>(t, q, s) }
  public var tqt: SIMD3<Scalar> { SIMD3<Scalar>(t, q, t) }
  public var tqp: SIMD3<Scalar> { SIMD3<Scalar>(t, q, p) }
  public var tqq: SIMD3<Scalar> { SIMD3<Scalar>(t, q, q) }
  public var pss: SIMD3<Scalar> { SIMD3<Scalar>(p, s, s) }
  public var pst: SIMD3<Scalar> { SIMD3<Scalar>(p, s, t) }
  public var psp: SIMD3<Scalar> { SIMD3<Scalar>(p, s, p) }
  public var psq: SIMD3<Scalar> { SIMD3<Scalar>(p, s, q) }
  public var pts: SIMD3<Scalar> { SIMD3<Scalar>(p, t, s) }
  public var ptt: SIMD3<Scalar> { SIMD3<Scalar>(p, t, t) }
  public var ptp: SIMD3<Scalar> { SIMD3<Scalar>(p, t, p) }
  public var ptq: SIMD3<Scalar> { SIMD3<Scalar>(p, t, q) }
  public var pps: SIMD3<Scalar> { SIMD3<Scalar>(p, p, s) }
  public var ppt: SIMD3<Scalar> { SIMD3<Scalar>(p, p, t) }
  public var ppp: SIMD3<Scalar> { SIMD3<Scalar>(p, p, p) }
  public var ppq: SIMD3<Scalar> { SIMD3<Scalar>(p, p, q) }
  public var pqs: SIMD3<Scalar> { SIMD3<Scalar>(p, q, s) }
  public var pqt: SIMD3<Scalar> { SIMD3<Scalar>(p, q, t) }
  public var pqp: SIMD3<Scalar> { SIMD3<Scalar>(p, q, p) }
  public var pqq: SIMD3<Scalar> { SIMD3<Scalar>(p, q, q) }
  public var qss: SIMD3<Scalar> { SIMD3<Scalar>(q, s, s) }
  public var qst: SIMD3<Scalar> { SIMD3<Scalar>(q, s, t) }
  public var qsp: SIMD3<Scalar> { SIMD3<Scalar>(q, s, p) }
  public var qsq: SIMD3<Scalar> { SIMD3<Scalar>(q, s, q) }
  public var qts: SIMD3<Scalar> { SIMD3<Scalar>(q, t, s) }
  public var qtt: SIMD3<Scalar> { SIMD3<Scalar>(q, t, t) }
  public var qtp: SIMD3<Scalar> { SIMD3<Scalar>(q, t, p) }
  public var qtq: SIMD3<Scalar> { SIMD3<Scalar>(q, t, q) }
  public var qps: SIMD3<Scalar> { SIMD3<Scalar>(q, p, s) }
  public var qpt: SIMD3<Scalar> { SIMD3<Scalar>(q, p, t) }
  public var qpp: SIMD3<Scalar> { SIMD3<Scalar>(q, p, p) }
  public var qpq: SIMD3<Scalar> { SIMD3<Scalar>(q, p, q) }
  public var qqs: SIMD3<Scalar> { SIMD3<Scalar>(q, q, s) }
  public var qqt: SIMD3<Scalar> { SIMD3<Scalar>(q, q, t) }
  public var qqp: SIMD3<Scalar> { SIMD3<Scalar>(q, q, p) }
  public var qqq: SIMD3<Scalar> { SIMD3<Scalar>(q, q, q) }


  public var xxxx: SIMD4<Scalar> { SIMD4<Scalar>(x, x, x, x) }
  public var xxxy: SIMD4<Scalar> { SIMD4<Scalar>(x, x, x, y) }
  public var xxxz: SIMD4<Scalar> { SIMD4<Scalar>(x, x, x, z) }
  public var xxxw: SIMD4<Scalar> { SIMD4<Scalar>(x, x, x, w) }
  public var xxyx: SIMD4<Scalar> { SIMD4<Scalar>(x, x, y, x) }
  public var xxyy: SIMD4<Scalar> { SIMD4<Scalar>(x, x, y, y) }
  public var xxyz: SIMD4<Scalar> { SIMD4<Scalar>(x, x, y, z) }
  public var xxyw: SIMD4<Scalar> { SIMD4<Scalar>(x, x, y, w) }
  public var xxzx: SIMD4<Scalar> { SIMD4<Scalar>(x, x, z, x) }
  public var xxzy: SIMD4<Scalar> { SIMD4<Scalar>(x, x, z, y) }
  public var xxzz: SIMD4<Scalar> { SIMD4<Scalar>(x, x, z, z) }
  public var xxzw: SIMD4<Scalar> { SIMD4<Scalar>(x, x, z, w) }
  public var xxwx: SIMD4<Scalar> { SIMD4<Scalar>(x, x, w, x) }
  public var xxwy: SIMD4<Scalar> { SIMD4<Scalar>(x, x, w, y) }
  public var xxwz: SIMD4<Scalar> { SIMD4<Scalar>(x, x, w, z) }
  public var xxww: SIMD4<Scalar> { SIMD4<Scalar>(x, x, w, w) }
  public var xyxx: SIMD4<Scalar> { SIMD4<Scalar>(x, y, x, x) }
  public var xyxy: SIMD4<Scalar> { SIMD4<Scalar>(x, y, x, y) }
  public var xyxz: SIMD4<Scalar> { SIMD4<Scalar>(x, y, x, z) }
  public var xyxw: SIMD4<Scalar> { SIMD4<Scalar>(x, y, x, w) }
  public var xyyx: SIMD4<Scalar> { SIMD4<Scalar>(x, y, y, x) }
  public var xyyy: SIMD4<Scalar> { SIMD4<Scalar>(x, y, y, y) }
  public var xyyz: SIMD4<Scalar> { SIMD4<Scalar>(x, y, y, z) }
  public var xyyw: SIMD4<Scalar> { SIMD4<Scalar>(x, y, y, w) }
  public var xyzx: SIMD4<Scalar> { SIMD4<Scalar>(x, y, z, x) }
  public var xyzy: SIMD4<Scalar> { SIMD4<Scalar>(x, y, z, y) }
  public var xyzz: SIMD4<Scalar> { SIMD4<Scalar>(x, y, z, z) }
  public var xyzw: SIMD4<Scalar> { SIMD4<Scalar>(x, y, z, w) }
  public var xywx: SIMD4<Scalar> { SIMD4<Scalar>(x, y, w, x) }
  public var xywy: SIMD4<Scalar> { SIMD4<Scalar>(x, y, w, y) }
  public var xywz: SIMD4<Scalar> { SIMD4<Scalar>(x, y, w, z) }
  public var xyww: SIMD4<Scalar> { SIMD4<Scalar>(x, y, w, w) }
  public var xzxx: SIMD4<Scalar> { SIMD4<Scalar>(x, z, x, x) }
  public var xzxy: SIMD4<Scalar> { SIMD4<Scalar>(x, z, x, y) }
  public var xzxz: SIMD4<Scalar> { SIMD4<Scalar>(x, z, x, z) }
  public var xzxw: SIMD4<Scalar> { SIMD4<Scalar>(x, z, x, w) }
  public var xzyx: SIMD4<Scalar> { SIMD4<Scalar>(x, z, y, x) }
  public var xzyy: SIMD4<Scalar> { SIMD4<Scalar>(x, z, y, y) }
  public var xzyz: SIMD4<Scalar> { SIMD4<Scalar>(x, z, y, z) }
  public var xzyw: SIMD4<Scalar> { SIMD4<Scalar>(x, z, y, w) }
  public var xzzx: SIMD4<Scalar> { SIMD4<Scalar>(x, z, z, x) }
  public var xzzy: SIMD4<Scalar> { SIMD4<Scalar>(x, z, z, y) }
  public var xzzz: SIMD4<Scalar> { SIMD4<Scalar>(x, z, z, z) }
  public var xzzw: SIMD4<Scalar> { SIMD4<Scalar>(x, z, z, w) }
  public var xzwx: SIMD4<Scalar> { SIMD4<Scalar>(x, z, w, x) }
  public var xzwy: SIMD4<Scalar> { SIMD4<Scalar>(x, z, w, y) }
  public var xzwz: SIMD4<Scalar> { SIMD4<Scalar>(x, z, w, z) }
  public var xzww: SIMD4<Scalar> { SIMD4<Scalar>(x, z, w, w) }
  public var xwxx: SIMD4<Scalar> { SIMD4<Scalar>(x, w, x, x) }
  public var xwxy: SIMD4<Scalar> { SIMD4<Scalar>(x, w, x, y) }
  public var xwxz: SIMD4<Scalar> { SIMD4<Scalar>(x, w, x, z) }
  public var xwxw: SIMD4<Scalar> { SIMD4<Scalar>(x, w, x, w) }
  public var xwyx: SIMD4<Scalar> { SIMD4<Scalar>(x, w, y, x) }
  public var xwyy: SIMD4<Scalar> { SIMD4<Scalar>(x, w, y, y) }
  public var xwyz: SIMD4<Scalar> { SIMD4<Scalar>(x, w, y, z) }
  public var xwyw: SIMD4<Scalar> { SIMD4<Scalar>(x, w, y, w) }
  public var xwzx: SIMD4<Scalar> { SIMD4<Scalar>(x, w, z, x) }
  public var xwzy: SIMD4<Scalar> { SIMD4<Scalar>(x, w, z, y) }
  public var xwzz: SIMD4<Scalar> { SIMD4<Scalar>(x, w, z, z) }
  public var xwzw: SIMD4<Scalar> { SIMD4<Scalar>(x, w, z, w) }
  public var xwwx: SIMD4<Scalar> { SIMD4<Scalar>(x, w, w, x) }
  public var xwwy: SIMD4<Scalar> { SIMD4<Scalar>(x, w, w, y) }
  public var xwwz: SIMD4<Scalar> { SIMD4<Scalar>(x, w, w, z) }
  public var xwww: SIMD4<Scalar> { SIMD4<Scalar>(x, w, w, w) }
  public var yxxx: SIMD4<Scalar> { SIMD4<Scalar>(y, x, x, x) }
  public var yxxy: SIMD4<Scalar> { SIMD4<Scalar>(y, x, x, y) }
  public var yxxz: SIMD4<Scalar> { SIMD4<Scalar>(y, x, x, z) }
  public var yxxw: SIMD4<Scalar> { SIMD4<Scalar>(y, x, x, w) }
  public var yxyx: SIMD4<Scalar> { SIMD4<Scalar>(y, x, y, x) }
  public var yxyy: SIMD4<Scalar> { SIMD4<Scalar>(y, x, y, y) }
  public var yxyz: SIMD4<Scalar> { SIMD4<Scalar>(y, x, y, z) }
  public var yxyw: SIMD4<Scalar> { SIMD4<Scalar>(y, x, y, w) }
  public var yxzx: SIMD4<Scalar> { SIMD4<Scalar>(y, x, z, x) }
  public var yxzy: SIMD4<Scalar> { SIMD4<Scalar>(y, x, z, y) }
  public var yxzz: SIMD4<Scalar> { SIMD4<Scalar>(y, x, z, z) }
  public var yxzw: SIMD4<Scalar> { SIMD4<Scalar>(y, x, z, w) }
  public var yxwx: SIMD4<Scalar> { SIMD4<Scalar>(y, x, w, x) }
  public var yxwy: SIMD4<Scalar> { SIMD4<Scalar>(y, x, w, y) }
  public var yxwz: SIMD4<Scalar> { SIMD4<Scalar>(y, x, w, z) }
  public var yxww: SIMD4<Scalar> { SIMD4<Scalar>(y, x, w, w) }
  public var yyxx: SIMD4<Scalar> { SIMD4<Scalar>(y, y, x, x) }
  public var yyxy: SIMD4<Scalar> { SIMD4<Scalar>(y, y, x, y) }
  public var yyxz: SIMD4<Scalar> { SIMD4<Scalar>(y, y, x, z) }
  public var yyxw: SIMD4<Scalar> { SIMD4<Scalar>(y, y, x, w) }
  public var yyyx: SIMD4<Scalar> { SIMD4<Scalar>(y, y, y, x) }
  public var yyyy: SIMD4<Scalar> { SIMD4<Scalar>(y, y, y, y) }
  public var yyyz: SIMD4<Scalar> { SIMD4<Scalar>(y, y, y, z) }
  public var yyyw: SIMD4<Scalar> { SIMD4<Scalar>(y, y, y, w) }
  public var yyzx: SIMD4<Scalar> { SIMD4<Scalar>(y, y, z, x) }
  public var yyzy: SIMD4<Scalar> { SIMD4<Scalar>(y, y, z, y) }
  public var yyzz: SIMD4<Scalar> { SIMD4<Scalar>(y, y, z, z) }
  public var yyzw: SIMD4<Scalar> { SIMD4<Scalar>(y, y, z, w) }
  public var yywx: SIMD4<Scalar> { SIMD4<Scalar>(y, y, w, x) }
  public var yywy: SIMD4<Scalar> { SIMD4<Scalar>(y, y, w, y) }
  public var yywz: SIMD4<Scalar> { SIMD4<Scalar>(y, y, w, z) }
  public var yyww: SIMD4<Scalar> { SIMD4<Scalar>(y, y, w, w) }
  public var yzxx: SIMD4<Scalar> { SIMD4<Scalar>(y, z, x, x) }
  public var yzxy: SIMD4<Scalar> { SIMD4<Scalar>(y, z, x, y) }
  public var yzxz: SIMD4<Scalar> { SIMD4<Scalar>(y, z, x, z) }
  public var yzxw: SIMD4<Scalar> { SIMD4<Scalar>(y, z, x, w) }
  public var yzyx: SIMD4<Scalar> { SIMD4<Scalar>(y, z, y, x) }
  public var yzyy: SIMD4<Scalar> { SIMD4<Scalar>(y, z, y, y) }
  public var yzyz: SIMD4<Scalar> { SIMD4<Scalar>(y, z, y, z) }
  public var yzyw: SIMD4<Scalar> { SIMD4<Scalar>(y, z, y, w) }
  public var yzzx: SIMD4<Scalar> { SIMD4<Scalar>(y, z, z, x) }
  public var yzzy: SIMD4<Scalar> { SIMD4<Scalar>(y, z, z, y) }
  public var yzzz: SIMD4<Scalar> { SIMD4<Scalar>(y, z, z, z) }
  public var yzzw: SIMD4<Scalar> { SIMD4<Scalar>(y, z, z, w) }
  public var yzwx: SIMD4<Scalar> { SIMD4<Scalar>(y, z, w, x) }
  public var yzwy: SIMD4<Scalar> { SIMD4<Scalar>(y, z, w, y) }
  public var yzwz: SIMD4<Scalar> { SIMD4<Scalar>(y, z, w, z) }
  public var yzww: SIMD4<Scalar> { SIMD4<Scalar>(y, z, w, w) }
  public var ywxx: SIMD4<Scalar> { SIMD4<Scalar>(y, w, x, x) }
  public var ywxy: SIMD4<Scalar> { SIMD4<Scalar>(y, w, x, y) }
  public var ywxz: SIMD4<Scalar> { SIMD4<Scalar>(y, w, x, z) }
  public var ywxw: SIMD4<Scalar> { SIMD4<Scalar>(y, w, x, w) }
  public var ywyx: SIMD4<Scalar> { SIMD4<Scalar>(y, w, y, x) }
  public var ywyy: SIMD4<Scalar> { SIMD4<Scalar>(y, w, y, y) }
  public var ywyz: SIMD4<Scalar> { SIMD4<Scalar>(y, w, y, z) }
  public var ywyw: SIMD4<Scalar> { SIMD4<Scalar>(y, w, y, w) }
  public var ywzx: SIMD4<Scalar> { SIMD4<Scalar>(y, w, z, x) }
  public var ywzy: SIMD4<Scalar> { SIMD4<Scalar>(y, w, z, y) }
  public var ywzz: SIMD4<Scalar> { SIMD4<Scalar>(y, w, z, z) }
  public var ywzw: SIMD4<Scalar> { SIMD4<Scalar>(y, w, z, w) }
  public var ywwx: SIMD4<Scalar> { SIMD4<Scalar>(y, w, w, x) }
  public var ywwy: SIMD4<Scalar> { SIMD4<Scalar>(y, w, w, y) }
  public var ywwz: SIMD4<Scalar> { SIMD4<Scalar>(y, w, w, z) }
  public var ywww: SIMD4<Scalar> { SIMD4<Scalar>(y, w, w, w) }
  public var zxxx: SIMD4<Scalar> { SIMD4<Scalar>(z, x, x, x) }
  public var zxxy: SIMD4<Scalar> { SIMD4<Scalar>(z, x, x, y) }
  public var zxxz: SIMD4<Scalar> { SIMD4<Scalar>(z, x, x, z) }
  public var zxxw: SIMD4<Scalar> { SIMD4<Scalar>(z, x, x, w) }
  public var zxyx: SIMD4<Scalar> { SIMD4<Scalar>(z, x, y, x) }
  public var zxyy: SIMD4<Scalar> { SIMD4<Scalar>(z, x, y, y) }
  public var zxyz: SIMD4<Scalar> { SIMD4<Scalar>(z, x, y, z) }
  public var zxyw: SIMD4<Scalar> { SIMD4<Scalar>(z, x, y, w) }
  public var zxzx: SIMD4<Scalar> { SIMD4<Scalar>(z, x, z, x) }
  public var zxzy: SIMD4<Scalar> { SIMD4<Scalar>(z, x, z, y) }
  public var zxzz: SIMD4<Scalar> { SIMD4<Scalar>(z, x, z, z) }
  public var zxzw: SIMD4<Scalar> { SIMD4<Scalar>(z, x, z, w) }
  public var zxwx: SIMD4<Scalar> { SIMD4<Scalar>(z, x, w, x) }
  public var zxwy: SIMD4<Scalar> { SIMD4<Scalar>(z, x, w, y) }
  public var zxwz: SIMD4<Scalar> { SIMD4<Scalar>(z, x, w, z) }
  public var zxww: SIMD4<Scalar> { SIMD4<Scalar>(z, x, w, w) }
  public var zyxx: SIMD4<Scalar> { SIMD4<Scalar>(z, y, x, x) }
  public var zyxy: SIMD4<Scalar> { SIMD4<Scalar>(z, y, x, y) }
  public var zyxz: SIMD4<Scalar> { SIMD4<Scalar>(z, y, x, z) }
  public var zyxw: SIMD4<Scalar> { SIMD4<Scalar>(z, y, x, w) }
  public var zyyx: SIMD4<Scalar> { SIMD4<Scalar>(z, y, y, x) }
  public var zyyy: SIMD4<Scalar> { SIMD4<Scalar>(z, y, y, y) }
  public var zyyz: SIMD4<Scalar> { SIMD4<Scalar>(z, y, y, z) }
  public var zyyw: SIMD4<Scalar> { SIMD4<Scalar>(z, y, y, w) }
  public var zyzx: SIMD4<Scalar> { SIMD4<Scalar>(z, y, z, x) }
  public var zyzy: SIMD4<Scalar> { SIMD4<Scalar>(z, y, z, y) }
  public var zyzz: SIMD4<Scalar> { SIMD4<Scalar>(z, y, z, z) }
  public var zyzw: SIMD4<Scalar> { SIMD4<Scalar>(z, y, z, w) }
  public var zywx: SIMD4<Scalar> { SIMD4<Scalar>(z, y, w, x) }
  public var zywy: SIMD4<Scalar> { SIMD4<Scalar>(z, y, w, y) }
  public var zywz: SIMD4<Scalar> { SIMD4<Scalar>(z, y, w, z) }
  public var zyww: SIMD4<Scalar> { SIMD4<Scalar>(z, y, w, w) }
  public var zzxx: SIMD4<Scalar> { SIMD4<Scalar>(z, z, x, x) }
  public var zzxy: SIMD4<Scalar> { SIMD4<Scalar>(z, z, x, y) }
  public var zzxz: SIMD4<Scalar> { SIMD4<Scalar>(z, z, x, z) }
  public var zzxw: SIMD4<Scalar> { SIMD4<Scalar>(z, z, x, w) }
  public var zzyx: SIMD4<Scalar> { SIMD4<Scalar>(z, z, y, x) }
  public var zzyy: SIMD4<Scalar> { SIMD4<Scalar>(z, z, y, y) }
  public var zzyz: SIMD4<Scalar> { SIMD4<Scalar>(z, z, y, z) }
  public var zzyw: SIMD4<Scalar> { SIMD4<Scalar>(z, z, y, w) }
  public var zzzx: SIMD4<Scalar> { SIMD4<Scalar>(z, z, z, x) }
  public var zzzy: SIMD4<Scalar> { SIMD4<Scalar>(z, z, z, y) }
  public var zzzz: SIMD4<Scalar> { SIMD4<Scalar>(z, z, z, z) }
  public var zzzw: SIMD4<Scalar> { SIMD4<Scalar>(z, z, z, w) }
  public var zzwx: SIMD4<Scalar> { SIMD4<Scalar>(z, z, w, x) }
  public var zzwy: SIMD4<Scalar> { SIMD4<Scalar>(z, z, w, y) }
  public var zzwz: SIMD4<Scalar> { SIMD4<Scalar>(z, z, w, z) }
  public var zzww: SIMD4<Scalar> { SIMD4<Scalar>(z, z, w, w) }
  public var zwxx: SIMD4<Scalar> { SIMD4<Scalar>(z, w, x, x) }
  public var zwxy: SIMD4<Scalar> { SIMD4<Scalar>(z, w, x, y) }
  public var zwxz: SIMD4<Scalar> { SIMD4<Scalar>(z, w, x, z) }
  public var zwxw: SIMD4<Scalar> { SIMD4<Scalar>(z, w, x, w) }
  public var zwyx: SIMD4<Scalar> { SIMD4<Scalar>(z, w, y, x) }
  public var zwyy: SIMD4<Scalar> { SIMD4<Scalar>(z, w, y, y) }
  public var zwyz: SIMD4<Scalar> { SIMD4<Scalar>(z, w, y, z) }
  public var zwyw: SIMD4<Scalar> { SIMD4<Scalar>(z, w, y, w) }
  public var zwzx: SIMD4<Scalar> { SIMD4<Scalar>(z, w, z, x) }
  public var zwzy: SIMD4<Scalar> { SIMD4<Scalar>(z, w, z, y) }
  public var zwzz: SIMD4<Scalar> { SIMD4<Scalar>(z, w, z, z) }
  public var zwzw: SIMD4<Scalar> { SIMD4<Scalar>(z, w, z, w) }
  public var zwwx: SIMD4<Scalar> { SIMD4<Scalar>(z, w, w, x) }
  public var zwwy: SIMD4<Scalar> { SIMD4<Scalar>(z, w, w, y) }
  public var zwwz: SIMD4<Scalar> { SIMD4<Scalar>(z, w, w, z) }
  public var zwww: SIMD4<Scalar> { SIMD4<Scalar>(z, w, w, w) }
  public var wxxx: SIMD4<Scalar> { SIMD4<Scalar>(w, x, x, x) }
  public var wxxy: SIMD4<Scalar> { SIMD4<Scalar>(w, x, x, y) }
  public var wxxz: SIMD4<Scalar> { SIMD4<Scalar>(w, x, x, z) }
  public var wxxw: SIMD4<Scalar> { SIMD4<Scalar>(w, x, x, w) }
  public var wxyx: SIMD4<Scalar> { SIMD4<Scalar>(w, x, y, x) }
  public var wxyy: SIMD4<Scalar> { SIMD4<Scalar>(w, x, y, y) }
  public var wxyz: SIMD4<Scalar> { SIMD4<Scalar>(w, x, y, z) }
  public var wxyw: SIMD4<Scalar> { SIMD4<Scalar>(w, x, y, w) }
  public var wxzx: SIMD4<Scalar> { SIMD4<Scalar>(w, x, z, x) }
  public var wxzy: SIMD4<Scalar> { SIMD4<Scalar>(w, x, z, y) }
  public var wxzz: SIMD4<Scalar> { SIMD4<Scalar>(w, x, z, z) }
  public var wxzw: SIMD4<Scalar> { SIMD4<Scalar>(w, x, z, w) }
  public var wxwx: SIMD4<Scalar> { SIMD4<Scalar>(w, x, w, x) }
  public var wxwy: SIMD4<Scalar> { SIMD4<Scalar>(w, x, w, y) }
  public var wxwz: SIMD4<Scalar> { SIMD4<Scalar>(w, x, w, z) }
  public var wxww: SIMD4<Scalar> { SIMD4<Scalar>(w, x, w, w) }
  public var wyxx: SIMD4<Scalar> { SIMD4<Scalar>(w, y, x, x) }
  public var wyxy: SIMD4<Scalar> { SIMD4<Scalar>(w, y, x, y) }
  public var wyxz: SIMD4<Scalar> { SIMD4<Scalar>(w, y, x, z) }
  public var wyxw: SIMD4<Scalar> { SIMD4<Scalar>(w, y, x, w) }
  public var wyyx: SIMD4<Scalar> { SIMD4<Scalar>(w, y, y, x) }
  public var wyyy: SIMD4<Scalar> { SIMD4<Scalar>(w, y, y, y) }
  public var wyyz: SIMD4<Scalar> { SIMD4<Scalar>(w, y, y, z) }
  public var wyyw: SIMD4<Scalar> { SIMD4<Scalar>(w, y, y, w) }
  public var wyzx: SIMD4<Scalar> { SIMD4<Scalar>(w, y, z, x) }
  public var wyzy: SIMD4<Scalar> { SIMD4<Scalar>(w, y, z, y) }
  public var wyzz: SIMD4<Scalar> { SIMD4<Scalar>(w, y, z, z) }
  public var wyzw: SIMD4<Scalar> { SIMD4<Scalar>(w, y, z, w) }
  public var wywx: SIMD4<Scalar> { SIMD4<Scalar>(w, y, w, x) }
  public var wywy: SIMD4<Scalar> { SIMD4<Scalar>(w, y, w, y) }
  public var wywz: SIMD4<Scalar> { SIMD4<Scalar>(w, y, w, z) }
  public var wyww: SIMD4<Scalar> { SIMD4<Scalar>(w, y, w, w) }
  public var wzxx: SIMD4<Scalar> { SIMD4<Scalar>(w, z, x, x) }
  public var wzxy: SIMD4<Scalar> { SIMD4<Scalar>(w, z, x, y) }
  public var wzxz: SIMD4<Scalar> { SIMD4<Scalar>(w, z, x, z) }
  public var wzxw: SIMD4<Scalar> { SIMD4<Scalar>(w, z, x, w) }
  public var wzyx: SIMD4<Scalar> { SIMD4<Scalar>(w, z, y, x) }
  public var wzyy: SIMD4<Scalar> { SIMD4<Scalar>(w, z, y, y) }
  public var wzyz: SIMD4<Scalar> { SIMD4<Scalar>(w, z, y, z) }
  public var wzyw: SIMD4<Scalar> { SIMD4<Scalar>(w, z, y, w) }
  public var wzzx: SIMD4<Scalar> { SIMD4<Scalar>(w, z, z, x) }
  public var wzzy: SIMD4<Scalar> { SIMD4<Scalar>(w, z, z, y) }
  public var wzzz: SIMD4<Scalar> { SIMD4<Scalar>(w, z, z, z) }
  public var wzzw: SIMD4<Scalar> { SIMD4<Scalar>(w, z, z, w) }
  public var wzwx: SIMD4<Scalar> { SIMD4<Scalar>(w, z, w, x) }
  public var wzwy: SIMD4<Scalar> { SIMD4<Scalar>(w, z, w, y) }
  public var wzwz: SIMD4<Scalar> { SIMD4<Scalar>(w, z, w, z) }
  public var wzww: SIMD4<Scalar> { SIMD4<Scalar>(w, z, w, w) }
  public var wwxx: SIMD4<Scalar> { SIMD4<Scalar>(w, w, x, x) }
  public var wwxy: SIMD4<Scalar> { SIMD4<Scalar>(w, w, x, y) }
  public var wwxz: SIMD4<Scalar> { SIMD4<Scalar>(w, w, x, z) }
  public var wwxw: SIMD4<Scalar> { SIMD4<Scalar>(w, w, x, w) }
  public var wwyx: SIMD4<Scalar> { SIMD4<Scalar>(w, w, y, x) }
  public var wwyy: SIMD4<Scalar> { SIMD4<Scalar>(w, w, y, y) }
  public var wwyz: SIMD4<Scalar> { SIMD4<Scalar>(w, w, y, z) }
  public var wwyw: SIMD4<Scalar> { SIMD4<Scalar>(w, w, y, w) }
  public var wwzx: SIMD4<Scalar> { SIMD4<Scalar>(w, w, z, x) }
  public var wwzy: SIMD4<Scalar> { SIMD4<Scalar>(w, w, z, y) }
  public var wwzz: SIMD4<Scalar> { SIMD4<Scalar>(w, w, z, z) }
  public var wwzw: SIMD4<Scalar> { SIMD4<Scalar>(w, w, z, w) }
  public var wwwx: SIMD4<Scalar> { SIMD4<Scalar>(w, w, w, x) }
  public var wwwy: SIMD4<Scalar> { SIMD4<Scalar>(w, w, w, y) }
  public var wwwz: SIMD4<Scalar> { SIMD4<Scalar>(w, w, w, z) }
  public var wwww: SIMD4<Scalar> { SIMD4<Scalar>(w, w, w, w) }

  public var rrrr: SIMD4<Scalar> { SIMD4<Scalar>(r, r, r, r) }
  public var rrrg: SIMD4<Scalar> { SIMD4<Scalar>(r, r, r, g) }
  public var rrrb: SIMD4<Scalar> { SIMD4<Scalar>(r, r, r, b) }
  public var rrra: SIMD4<Scalar> { SIMD4<Scalar>(r, r, r, a) }
  public var rrgr: SIMD4<Scalar> { SIMD4<Scalar>(r, r, g, r) }
  public var rrgg: SIMD4<Scalar> { SIMD4<Scalar>(r, r, g, g) }
  public var rrgb: SIMD4<Scalar> { SIMD4<Scalar>(r, r, g, b) }
  public var rrga: SIMD4<Scalar> { SIMD4<Scalar>(r, r, g, a) }
  public var rrbr: SIMD4<Scalar> { SIMD4<Scalar>(r, r, b, r) }
  public var rrbg: SIMD4<Scalar> { SIMD4<Scalar>(r, r, b, g) }
  public var rrbb: SIMD4<Scalar> { SIMD4<Scalar>(r, r, b, b) }
  public var rrba: SIMD4<Scalar> { SIMD4<Scalar>(r, r, b, a) }
  public var rrar: SIMD4<Scalar> { SIMD4<Scalar>(r, r, a, r) }
  public var rrag: SIMD4<Scalar> { SIMD4<Scalar>(r, r, a, g) }
  public var rrab: SIMD4<Scalar> { SIMD4<Scalar>(r, r, a, b) }
  public var rraa: SIMD4<Scalar> { SIMD4<Scalar>(r, r, a, a) }
  public var rgrr: SIMD4<Scalar> { SIMD4<Scalar>(r, g, r, r) }
  public var rgrg: SIMD4<Scalar> { SIMD4<Scalar>(r, g, r, g) }
  public var rgrb: SIMD4<Scalar> { SIMD4<Scalar>(r, g, r, b) }
  public var rgra: SIMD4<Scalar> { SIMD4<Scalar>(r, g, r, a) }
  public var rggr: SIMD4<Scalar> { SIMD4<Scalar>(r, g, g, r) }
  public var rggg: SIMD4<Scalar> { SIMD4<Scalar>(r, g, g, g) }
  public var rggb: SIMD4<Scalar> { SIMD4<Scalar>(r, g, g, b) }
  public var rgga: SIMD4<Scalar> { SIMD4<Scalar>(r, g, g, a) }
  public var rgbr: SIMD4<Scalar> { SIMD4<Scalar>(r, g, b, r) }
  public var rgbg: SIMD4<Scalar> { SIMD4<Scalar>(r, g, b, g) }
  public var rgbb: SIMD4<Scalar> { SIMD4<Scalar>(r, g, b, b) }
  public var rgba: SIMD4<Scalar> { SIMD4<Scalar>(r, g, b, a) }
  public var rgar: SIMD4<Scalar> { SIMD4<Scalar>(r, g, a, r) }
  public var rgag: SIMD4<Scalar> { SIMD4<Scalar>(r, g, a, g) }
  public var rgab: SIMD4<Scalar> { SIMD4<Scalar>(r, g, a, b) }
  public var rgaa: SIMD4<Scalar> { SIMD4<Scalar>(r, g, a, a) }
  public var rbrr: SIMD4<Scalar> { SIMD4<Scalar>(r, b, r, r) }
  public var rbrg: SIMD4<Scalar> { SIMD4<Scalar>(r, b, r, g) }
  public var rbrb: SIMD4<Scalar> { SIMD4<Scalar>(r, b, r, b) }
  public var rbra: SIMD4<Scalar> { SIMD4<Scalar>(r, b, r, a) }
  public var rbgr: SIMD4<Scalar> { SIMD4<Scalar>(r, b, g, r) }
  public var rbgg: SIMD4<Scalar> { SIMD4<Scalar>(r, b, g, g) }
  public var rbgb: SIMD4<Scalar> { SIMD4<Scalar>(r, b, g, b) }
  public var rbga: SIMD4<Scalar> { SIMD4<Scalar>(r, b, g, a) }
  public var rbbr: SIMD4<Scalar> { SIMD4<Scalar>(r, b, b, r) }
  public var rbbg: SIMD4<Scalar> { SIMD4<Scalar>(r, b, b, g) }
  public var rbbb: SIMD4<Scalar> { SIMD4<Scalar>(r, b, b, b) }
  public var rbba: SIMD4<Scalar> { SIMD4<Scalar>(r, b, b, a) }
  public var rbar: SIMD4<Scalar> { SIMD4<Scalar>(r, b, a, r) }
  public var rbag: SIMD4<Scalar> { SIMD4<Scalar>(r, b, a, g) }
  public var rbab: SIMD4<Scalar> { SIMD4<Scalar>(r, b, a, b) }
  public var rbaa: SIMD4<Scalar> { SIMD4<Scalar>(r, b, a, a) }
  public var rarr: SIMD4<Scalar> { SIMD4<Scalar>(r, a, r, r) }
  public var rarg: SIMD4<Scalar> { SIMD4<Scalar>(r, a, r, g) }
  public var rarb: SIMD4<Scalar> { SIMD4<Scalar>(r, a, r, b) }
  public var rara: SIMD4<Scalar> { SIMD4<Scalar>(r, a, r, a) }
  public var ragr: SIMD4<Scalar> { SIMD4<Scalar>(r, a, g, r) }
  public var ragg: SIMD4<Scalar> { SIMD4<Scalar>(r, a, g, g) }
  public var ragb: SIMD4<Scalar> { SIMD4<Scalar>(r, a, g, b) }
  public var raga: SIMD4<Scalar> { SIMD4<Scalar>(r, a, g, a) }
  public var rabr: SIMD4<Scalar> { SIMD4<Scalar>(r, a, b, r) }
  public var rabg: SIMD4<Scalar> { SIMD4<Scalar>(r, a, b, g) }
  public var rabb: SIMD4<Scalar> { SIMD4<Scalar>(r, a, b, b) }
  public var raba: SIMD4<Scalar> { SIMD4<Scalar>(r, a, b, a) }
  public var raar: SIMD4<Scalar> { SIMD4<Scalar>(r, a, a, r) }
  public var raag: SIMD4<Scalar> { SIMD4<Scalar>(r, a, a, g) }
  public var raab: SIMD4<Scalar> { SIMD4<Scalar>(r, a, a, b) }
  public var raaa: SIMD4<Scalar> { SIMD4<Scalar>(r, a, a, a) }
  public var grrr: SIMD4<Scalar> { SIMD4<Scalar>(g, r, r, r) }
  public var grrg: SIMD4<Scalar> { SIMD4<Scalar>(g, r, r, g) }
  public var grrb: SIMD4<Scalar> { SIMD4<Scalar>(g, r, r, b) }
  public var grra: SIMD4<Scalar> { SIMD4<Scalar>(g, r, r, a) }
  public var grgr: SIMD4<Scalar> { SIMD4<Scalar>(g, r, g, r) }
  public var grgg: SIMD4<Scalar> { SIMD4<Scalar>(g, r, g, g) }
  public var grgb: SIMD4<Scalar> { SIMD4<Scalar>(g, r, g, b) }
  public var grga: SIMD4<Scalar> { SIMD4<Scalar>(g, r, g, a) }
  public var grbr: SIMD4<Scalar> { SIMD4<Scalar>(g, r, b, r) }
  public var grbg: SIMD4<Scalar> { SIMD4<Scalar>(g, r, b, g) }
  public var grbb: SIMD4<Scalar> { SIMD4<Scalar>(g, r, b, b) }
  public var grba: SIMD4<Scalar> { SIMD4<Scalar>(g, r, b, a) }
  public var grar: SIMD4<Scalar> { SIMD4<Scalar>(g, r, a, r) }
  public var grag: SIMD4<Scalar> { SIMD4<Scalar>(g, r, a, g) }
  public var grab: SIMD4<Scalar> { SIMD4<Scalar>(g, r, a, b) }
  public var graa: SIMD4<Scalar> { SIMD4<Scalar>(g, r, a, a) }
  public var ggrr: SIMD4<Scalar> { SIMD4<Scalar>(g, g, r, r) }
  public var ggrg: SIMD4<Scalar> { SIMD4<Scalar>(g, g, r, g) }
  public var ggrb: SIMD4<Scalar> { SIMD4<Scalar>(g, g, r, b) }
  public var ggra: SIMD4<Scalar> { SIMD4<Scalar>(g, g, r, a) }
  public var gggr: SIMD4<Scalar> { SIMD4<Scalar>(g, g, g, r) }
  public var gggg: SIMD4<Scalar> { SIMD4<Scalar>(g, g, g, g) }
  public var gggb: SIMD4<Scalar> { SIMD4<Scalar>(g, g, g, b) }
  public var ggga: SIMD4<Scalar> { SIMD4<Scalar>(g, g, g, a) }
  public var ggbr: SIMD4<Scalar> { SIMD4<Scalar>(g, g, b, r) }
  public var ggbg: SIMD4<Scalar> { SIMD4<Scalar>(g, g, b, g) }
  public var ggbb: SIMD4<Scalar> { SIMD4<Scalar>(g, g, b, b) }
  public var ggba: SIMD4<Scalar> { SIMD4<Scalar>(g, g, b, a) }
  public var ggar: SIMD4<Scalar> { SIMD4<Scalar>(g, g, a, r) }
  public var ggag: SIMD4<Scalar> { SIMD4<Scalar>(g, g, a, g) }
  public var ggab: SIMD4<Scalar> { SIMD4<Scalar>(g, g, a, b) }
  public var ggaa: SIMD4<Scalar> { SIMD4<Scalar>(g, g, a, a) }
  public var gbrr: SIMD4<Scalar> { SIMD4<Scalar>(g, b, r, r) }
  public var gbrg: SIMD4<Scalar> { SIMD4<Scalar>(g, b, r, g) }
  public var gbrb: SIMD4<Scalar> { SIMD4<Scalar>(g, b, r, b) }
  public var gbra: SIMD4<Scalar> { SIMD4<Scalar>(g, b, r, a) }
  public var gbgr: SIMD4<Scalar> { SIMD4<Scalar>(g, b, g, r) }
  public var gbgg: SIMD4<Scalar> { SIMD4<Scalar>(g, b, g, g) }
  public var gbgb: SIMD4<Scalar> { SIMD4<Scalar>(g, b, g, b) }
  public var gbga: SIMD4<Scalar> { SIMD4<Scalar>(g, b, g, a) }
  public var gbbr: SIMD4<Scalar> { SIMD4<Scalar>(g, b, b, r) }
  public var gbbg: SIMD4<Scalar> { SIMD4<Scalar>(g, b, b, g) }
  public var gbbb: SIMD4<Scalar> { SIMD4<Scalar>(g, b, b, b) }
  public var gbba: SIMD4<Scalar> { SIMD4<Scalar>(g, b, b, a) }
  public var gbar: SIMD4<Scalar> { SIMD4<Scalar>(g, b, a, r) }
  public var gbag: SIMD4<Scalar> { SIMD4<Scalar>(g, b, a, g) }
  public var gbab: SIMD4<Scalar> { SIMD4<Scalar>(g, b, a, b) }
  public var gbaa: SIMD4<Scalar> { SIMD4<Scalar>(g, b, a, a) }
  public var garr: SIMD4<Scalar> { SIMD4<Scalar>(g, a, r, r) }
  public var garg: SIMD4<Scalar> { SIMD4<Scalar>(g, a, r, g) }
  public var garb: SIMD4<Scalar> { SIMD4<Scalar>(g, a, r, b) }
  public var gara: SIMD4<Scalar> { SIMD4<Scalar>(g, a, r, a) }
  public var gagr: SIMD4<Scalar> { SIMD4<Scalar>(g, a, g, r) }
  public var gagg: SIMD4<Scalar> { SIMD4<Scalar>(g, a, g, g) }
  public var gagb: SIMD4<Scalar> { SIMD4<Scalar>(g, a, g, b) }
  public var gaga: SIMD4<Scalar> { SIMD4<Scalar>(g, a, g, a) }
  public var gabr: SIMD4<Scalar> { SIMD4<Scalar>(g, a, b, r) }
  public var gabg: SIMD4<Scalar> { SIMD4<Scalar>(g, a, b, g) }
  public var gabb: SIMD4<Scalar> { SIMD4<Scalar>(g, a, b, b) }
  public var gaba: SIMD4<Scalar> { SIMD4<Scalar>(g, a, b, a) }
  public var gaar: SIMD4<Scalar> { SIMD4<Scalar>(g, a, a, r) }
  public var gaag: SIMD4<Scalar> { SIMD4<Scalar>(g, a, a, g) }
  public var gaab: SIMD4<Scalar> { SIMD4<Scalar>(g, a, a, b) }
  public var gaaa: SIMD4<Scalar> { SIMD4<Scalar>(g, a, a, a) }
  public var brrr: SIMD4<Scalar> { SIMD4<Scalar>(b, r, r, r) }
  public var brrg: SIMD4<Scalar> { SIMD4<Scalar>(b, r, r, g) }
  public var brrb: SIMD4<Scalar> { SIMD4<Scalar>(b, r, r, b) }
  public var brra: SIMD4<Scalar> { SIMD4<Scalar>(b, r, r, a) }
  public var brgr: SIMD4<Scalar> { SIMD4<Scalar>(b, r, g, r) }
  public var brgg: SIMD4<Scalar> { SIMD4<Scalar>(b, r, g, g) }
  public var brgb: SIMD4<Scalar> { SIMD4<Scalar>(b, r, g, b) }
  public var brga: SIMD4<Scalar> { SIMD4<Scalar>(b, r, g, a) }
  public var brbr: SIMD4<Scalar> { SIMD4<Scalar>(b, r, b, r) }
  public var brbg: SIMD4<Scalar> { SIMD4<Scalar>(b, r, b, g) }
  public var brbb: SIMD4<Scalar> { SIMD4<Scalar>(b, r, b, b) }
  public var brba: SIMD4<Scalar> { SIMD4<Scalar>(b, r, b, a) }
  public var brar: SIMD4<Scalar> { SIMD4<Scalar>(b, r, a, r) }
  public var brag: SIMD4<Scalar> { SIMD4<Scalar>(b, r, a, g) }
  public var brab: SIMD4<Scalar> { SIMD4<Scalar>(b, r, a, b) }
  public var braa: SIMD4<Scalar> { SIMD4<Scalar>(b, r, a, a) }
  public var bgrr: SIMD4<Scalar> { SIMD4<Scalar>(b, g, r, r) }
  public var bgrg: SIMD4<Scalar> { SIMD4<Scalar>(b, g, r, g) }
  public var bgrb: SIMD4<Scalar> { SIMD4<Scalar>(b, g, r, b) }
  public var bgra: SIMD4<Scalar> { SIMD4<Scalar>(b, g, r, a) }
  public var bggr: SIMD4<Scalar> { SIMD4<Scalar>(b, g, g, r) }
  public var bggg: SIMD4<Scalar> { SIMD4<Scalar>(b, g, g, g) }
  public var bggb: SIMD4<Scalar> { SIMD4<Scalar>(b, g, g, b) }
  public var bgga: SIMD4<Scalar> { SIMD4<Scalar>(b, g, g, a) }
  public var bgbr: SIMD4<Scalar> { SIMD4<Scalar>(b, g, b, r) }
  public var bgbg: SIMD4<Scalar> { SIMD4<Scalar>(b, g, b, g) }
  public var bgbb: SIMD4<Scalar> { SIMD4<Scalar>(b, g, b, b) }
  public var bgba: SIMD4<Scalar> { SIMD4<Scalar>(b, g, b, a) }
  public var bgar: SIMD4<Scalar> { SIMD4<Scalar>(b, g, a, r) }
  public var bgag: SIMD4<Scalar> { SIMD4<Scalar>(b, g, a, g) }
  public var bgab: SIMD4<Scalar> { SIMD4<Scalar>(b, g, a, b) }
  public var bgaa: SIMD4<Scalar> { SIMD4<Scalar>(b, g, a, a) }
  public var bbrr: SIMD4<Scalar> { SIMD4<Scalar>(b, b, r, r) }
  public var bbrg: SIMD4<Scalar> { SIMD4<Scalar>(b, b, r, g) }
  public var bbrb: SIMD4<Scalar> { SIMD4<Scalar>(b, b, r, b) }
  public var bbra: SIMD4<Scalar> { SIMD4<Scalar>(b, b, r, a) }
  public var bbgr: SIMD4<Scalar> { SIMD4<Scalar>(b, b, g, r) }
  public var bbgg: SIMD4<Scalar> { SIMD4<Scalar>(b, b, g, g) }
  public var bbgb: SIMD4<Scalar> { SIMD4<Scalar>(b, b, g, b) }
  public var bbga: SIMD4<Scalar> { SIMD4<Scalar>(b, b, g, a) }
  public var bbbr: SIMD4<Scalar> { SIMD4<Scalar>(b, b, b, r) }
  public var bbbg: SIMD4<Scalar> { SIMD4<Scalar>(b, b, b, g) }
  public var bbbb: SIMD4<Scalar> { SIMD4<Scalar>(b, b, b, b) }
  public var bbba: SIMD4<Scalar> { SIMD4<Scalar>(b, b, b, a) }
  public var bbar: SIMD4<Scalar> { SIMD4<Scalar>(b, b, a, r) }
  public var bbag: SIMD4<Scalar> { SIMD4<Scalar>(b, b, a, g) }
  public var bbab: SIMD4<Scalar> { SIMD4<Scalar>(b, b, a, b) }
  public var bbaa: SIMD4<Scalar> { SIMD4<Scalar>(b, b, a, a) }
  public var barr: SIMD4<Scalar> { SIMD4<Scalar>(b, a, r, r) }
  public var barg: SIMD4<Scalar> { SIMD4<Scalar>(b, a, r, g) }
  public var barb: SIMD4<Scalar> { SIMD4<Scalar>(b, a, r, b) }
  public var bara: SIMD4<Scalar> { SIMD4<Scalar>(b, a, r, a) }
  public var bagr: SIMD4<Scalar> { SIMD4<Scalar>(b, a, g, r) }
  public var bagg: SIMD4<Scalar> { SIMD4<Scalar>(b, a, g, g) }
  public var bagb: SIMD4<Scalar> { SIMD4<Scalar>(b, a, g, b) }
  public var baga: SIMD4<Scalar> { SIMD4<Scalar>(b, a, g, a) }
  public var babr: SIMD4<Scalar> { SIMD4<Scalar>(b, a, b, r) }
  public var babg: SIMD4<Scalar> { SIMD4<Scalar>(b, a, b, g) }
  public var babb: SIMD4<Scalar> { SIMD4<Scalar>(b, a, b, b) }
  public var baba: SIMD4<Scalar> { SIMD4<Scalar>(b, a, b, a) }
  public var baar: SIMD4<Scalar> { SIMD4<Scalar>(b, a, a, r) }
  public var baag: SIMD4<Scalar> { SIMD4<Scalar>(b, a, a, g) }
  public var baab: SIMD4<Scalar> { SIMD4<Scalar>(b, a, a, b) }
  public var baaa: SIMD4<Scalar> { SIMD4<Scalar>(b, a, a, a) }
  public var arrr: SIMD4<Scalar> { SIMD4<Scalar>(a, r, r, r) }
  public var arrg: SIMD4<Scalar> { SIMD4<Scalar>(a, r, r, g) }
  public var arrb: SIMD4<Scalar> { SIMD4<Scalar>(a, r, r, b) }
  public var arra: SIMD4<Scalar> { SIMD4<Scalar>(a, r, r, a) }
  public var argr: SIMD4<Scalar> { SIMD4<Scalar>(a, r, g, r) }
  public var argg: SIMD4<Scalar> { SIMD4<Scalar>(a, r, g, g) }
  public var argb: SIMD4<Scalar> { SIMD4<Scalar>(a, r, g, b) }
  public var arga: SIMD4<Scalar> { SIMD4<Scalar>(a, r, g, a) }
  public var arbr: SIMD4<Scalar> { SIMD4<Scalar>(a, r, b, r) }
  public var arbg: SIMD4<Scalar> { SIMD4<Scalar>(a, r, b, g) }
  public var arbb: SIMD4<Scalar> { SIMD4<Scalar>(a, r, b, b) }
  public var arba: SIMD4<Scalar> { SIMD4<Scalar>(a, r, b, a) }
  public var arar: SIMD4<Scalar> { SIMD4<Scalar>(a, r, a, r) }
  public var arag: SIMD4<Scalar> { SIMD4<Scalar>(a, r, a, g) }
  public var arab: SIMD4<Scalar> { SIMD4<Scalar>(a, r, a, b) }
  public var araa: SIMD4<Scalar> { SIMD4<Scalar>(a, r, a, a) }
  public var agrr: SIMD4<Scalar> { SIMD4<Scalar>(a, g, r, r) }
  public var agrg: SIMD4<Scalar> { SIMD4<Scalar>(a, g, r, g) }
  public var agrb: SIMD4<Scalar> { SIMD4<Scalar>(a, g, r, b) }
  public var agra: SIMD4<Scalar> { SIMD4<Scalar>(a, g, r, a) }
  public var aggr: SIMD4<Scalar> { SIMD4<Scalar>(a, g, g, r) }
  public var aggg: SIMD4<Scalar> { SIMD4<Scalar>(a, g, g, g) }
  public var aggb: SIMD4<Scalar> { SIMD4<Scalar>(a, g, g, b) }
  public var agga: SIMD4<Scalar> { SIMD4<Scalar>(a, g, g, a) }
  public var agbr: SIMD4<Scalar> { SIMD4<Scalar>(a, g, b, r) }
  public var agbg: SIMD4<Scalar> { SIMD4<Scalar>(a, g, b, g) }
  public var agbb: SIMD4<Scalar> { SIMD4<Scalar>(a, g, b, b) }
  public var agba: SIMD4<Scalar> { SIMD4<Scalar>(a, g, b, a) }
  public var agar: SIMD4<Scalar> { SIMD4<Scalar>(a, g, a, r) }
  public var agag: SIMD4<Scalar> { SIMD4<Scalar>(a, g, a, g) }
  public var agab: SIMD4<Scalar> { SIMD4<Scalar>(a, g, a, b) }
  public var agaa: SIMD4<Scalar> { SIMD4<Scalar>(a, g, a, a) }
  public var abrr: SIMD4<Scalar> { SIMD4<Scalar>(a, b, r, r) }
  public var abrg: SIMD4<Scalar> { SIMD4<Scalar>(a, b, r, g) }
  public var abrb: SIMD4<Scalar> { SIMD4<Scalar>(a, b, r, b) }
  public var abra: SIMD4<Scalar> { SIMD4<Scalar>(a, b, r, a) }
  public var abgr: SIMD4<Scalar> { SIMD4<Scalar>(a, b, g, r) }
  public var abgg: SIMD4<Scalar> { SIMD4<Scalar>(a, b, g, g) }
  public var abgb: SIMD4<Scalar> { SIMD4<Scalar>(a, b, g, b) }
  public var abga: SIMD4<Scalar> { SIMD4<Scalar>(a, b, g, a) }
  public var abbr: SIMD4<Scalar> { SIMD4<Scalar>(a, b, b, r) }
  public var abbg: SIMD4<Scalar> { SIMD4<Scalar>(a, b, b, g) }
  public var abbb: SIMD4<Scalar> { SIMD4<Scalar>(a, b, b, b) }
  public var abba: SIMD4<Scalar> { SIMD4<Scalar>(a, b, b, a) }
  public var abar: SIMD4<Scalar> { SIMD4<Scalar>(a, b, a, r) }
  public var abag: SIMD4<Scalar> { SIMD4<Scalar>(a, b, a, g) }
  public var abab: SIMD4<Scalar> { SIMD4<Scalar>(a, b, a, b) }
  public var abaa: SIMD4<Scalar> { SIMD4<Scalar>(a, b, a, a) }
  public var aarr: SIMD4<Scalar> { SIMD4<Scalar>(a, a, r, r) }
  public var aarg: SIMD4<Scalar> { SIMD4<Scalar>(a, a, r, g) }
  public var aarb: SIMD4<Scalar> { SIMD4<Scalar>(a, a, r, b) }
  public var aara: SIMD4<Scalar> { SIMD4<Scalar>(a, a, r, a) }
  public var aagr: SIMD4<Scalar> { SIMD4<Scalar>(a, a, g, r) }
  public var aagg: SIMD4<Scalar> { SIMD4<Scalar>(a, a, g, g) }
  public var aagb: SIMD4<Scalar> { SIMD4<Scalar>(a, a, g, b) }
  public var aaga: SIMD4<Scalar> { SIMD4<Scalar>(a, a, g, a) }
  public var aabr: SIMD4<Scalar> { SIMD4<Scalar>(a, a, b, r) }
  public var aabg: SIMD4<Scalar> { SIMD4<Scalar>(a, a, b, g) }
  public var aabb: SIMD4<Scalar> { SIMD4<Scalar>(a, a, b, b) }
  public var aaba: SIMD4<Scalar> { SIMD4<Scalar>(a, a, b, a) }
  public var aaar: SIMD4<Scalar> { SIMD4<Scalar>(a, a, a, r) }
  public var aaag: SIMD4<Scalar> { SIMD4<Scalar>(a, a, a, g) }
  public var aaab: SIMD4<Scalar> { SIMD4<Scalar>(a, a, a, b) }
  public var aaaa: SIMD4<Scalar> { SIMD4<Scalar>(a, a, a, a) }

  public var ssss: SIMD4<Scalar> { SIMD4<Scalar>(s, s, s, s) }
  public var ssst: SIMD4<Scalar> { SIMD4<Scalar>(s, s, s, t) }
  public var sssp: SIMD4<Scalar> { SIMD4<Scalar>(s, s, s, p) }
  public var sssq: SIMD4<Scalar> { SIMD4<Scalar>(s, s, s, q) }
  public var ssts: SIMD4<Scalar> { SIMD4<Scalar>(s, s, t, s) }
  public var sstt: SIMD4<Scalar> { SIMD4<Scalar>(s, s, t, t) }
  public var sstp: SIMD4<Scalar> { SIMD4<Scalar>(s, s, t, p) }
  public var sstq: SIMD4<Scalar> { SIMD4<Scalar>(s, s, t, q) }
  public var ssps: SIMD4<Scalar> { SIMD4<Scalar>(s, s, p, s) }
  public var sspt: SIMD4<Scalar> { SIMD4<Scalar>(s, s, p, t) }
  public var sspp: SIMD4<Scalar> { SIMD4<Scalar>(s, s, p, p) }
  public var sspq: SIMD4<Scalar> { SIMD4<Scalar>(s, s, p, q) }
  public var ssqs: SIMD4<Scalar> { SIMD4<Scalar>(s, s, q, s) }
  public var ssqt: SIMD4<Scalar> { SIMD4<Scalar>(s, s, q, t) }
  public var ssqp: SIMD4<Scalar> { SIMD4<Scalar>(s, s, q, p) }
  public var ssqq: SIMD4<Scalar> { SIMD4<Scalar>(s, s, q, q) }
  public var stss: SIMD4<Scalar> { SIMD4<Scalar>(s, t, s, s) }
  public var stst: SIMD4<Scalar> { SIMD4<Scalar>(s, t, s, t) }
  public var stsp: SIMD4<Scalar> { SIMD4<Scalar>(s, t, s, p) }
  public var stsq: SIMD4<Scalar> { SIMD4<Scalar>(s, t, s, q) }
  public var stts: SIMD4<Scalar> { SIMD4<Scalar>(s, t, t, s) }
  public var sttt: SIMD4<Scalar> { SIMD4<Scalar>(s, t, t, t) }
  public var sttp: SIMD4<Scalar> { SIMD4<Scalar>(s, t, t, p) }
  public var sttq: SIMD4<Scalar> { SIMD4<Scalar>(s, t, t, q) }
  public var stps: SIMD4<Scalar> { SIMD4<Scalar>(s, t, p, s) }
  public var stpt: SIMD4<Scalar> { SIMD4<Scalar>(s, t, p, t) }
  public var stpp: SIMD4<Scalar> { SIMD4<Scalar>(s, t, p, p) }
  public var stpq: SIMD4<Scalar> { SIMD4<Scalar>(s, t, p, q) }
  public var stqs: SIMD4<Scalar> { SIMD4<Scalar>(s, t, q, s) }
  public var stqt: SIMD4<Scalar> { SIMD4<Scalar>(s, t, q, t) }
  public var stqp: SIMD4<Scalar> { SIMD4<Scalar>(s, t, q, p) }
  public var stqq: SIMD4<Scalar> { SIMD4<Scalar>(s, t, q, q) }
  public var spss: SIMD4<Scalar> { SIMD4<Scalar>(s, p, s, s) }
  public var spst: SIMD4<Scalar> { SIMD4<Scalar>(s, p, s, t) }
  public var spsp: SIMD4<Scalar> { SIMD4<Scalar>(s, p, s, p) }
  public var spsq: SIMD4<Scalar> { SIMD4<Scalar>(s, p, s, q) }
  public var spts: SIMD4<Scalar> { SIMD4<Scalar>(s, p, t, s) }
  public var sptt: SIMD4<Scalar> { SIMD4<Scalar>(s, p, t, t) }
  public var sptp: SIMD4<Scalar> { SIMD4<Scalar>(s, p, t, p) }
  public var sptq: SIMD4<Scalar> { SIMD4<Scalar>(s, p, t, q) }
  public var spps: SIMD4<Scalar> { SIMD4<Scalar>(s, p, p, s) }
  public var sppt: SIMD4<Scalar> { SIMD4<Scalar>(s, p, p, t) }
  public var sppp: SIMD4<Scalar> { SIMD4<Scalar>(s, p, p, p) }
  public var sppq: SIMD4<Scalar> { SIMD4<Scalar>(s, p, p, q) }
  public var spqs: SIMD4<Scalar> { SIMD4<Scalar>(s, p, q, s) }
  public var spqt: SIMD4<Scalar> { SIMD4<Scalar>(s, p, q, t) }
  public var spqp: SIMD4<Scalar> { SIMD4<Scalar>(s, p, q, p) }
  public var spqq: SIMD4<Scalar> { SIMD4<Scalar>(s, p, q, q) }
  public var sqss: SIMD4<Scalar> { SIMD4<Scalar>(s, q, s, s) }
  public var sqst: SIMD4<Scalar> { SIMD4<Scalar>(s, q, s, t) }
  public var sqsp: SIMD4<Scalar> { SIMD4<Scalar>(s, q, s, p) }
  public var sqsq: SIMD4<Scalar> { SIMD4<Scalar>(s, q, s, q) }
  public var sqts: SIMD4<Scalar> { SIMD4<Scalar>(s, q, t, s) }
  public var sqtt: SIMD4<Scalar> { SIMD4<Scalar>(s, q, t, t) }
  public var sqtp: SIMD4<Scalar> { SIMD4<Scalar>(s, q, t, p) }
  public var sqtq: SIMD4<Scalar> { SIMD4<Scalar>(s, q, t, q) }
  public var sqps: SIMD4<Scalar> { SIMD4<Scalar>(s, q, p, s) }
  public var sqpt: SIMD4<Scalar> { SIMD4<Scalar>(s, q, p, t) }
  public var sqpp: SIMD4<Scalar> { SIMD4<Scalar>(s, q, p, p) }
  public var sqpq: SIMD4<Scalar> { SIMD4<Scalar>(s, q, p, q) }
  public var sqqs: SIMD4<Scalar> { SIMD4<Scalar>(s, q, q, s) }
  public var sqqt: SIMD4<Scalar> { SIMD4<Scalar>(s, q, q, t) }
  public var sqqp: SIMD4<Scalar> { SIMD4<Scalar>(s, q, q, p) }
  public var sqqq: SIMD4<Scalar> { SIMD4<Scalar>(s, q, q, q) }
  public var tsss: SIMD4<Scalar> { SIMD4<Scalar>(t, s, s, s) }
  public var tsst: SIMD4<Scalar> { SIMD4<Scalar>(t, s, s, t) }
  public var tssp: SIMD4<Scalar> { SIMD4<Scalar>(t, s, s, p) }
  public var tssq: SIMD4<Scalar> { SIMD4<Scalar>(t, s, s, q) }
  public var tsts: SIMD4<Scalar> { SIMD4<Scalar>(t, s, t, s) }
  public var tstt: SIMD4<Scalar> { SIMD4<Scalar>(t, s, t, t) }
  public var tstp: SIMD4<Scalar> { SIMD4<Scalar>(t, s, t, p) }
  public var tstq: SIMD4<Scalar> { SIMD4<Scalar>(t, s, t, q) }
  public var tsps: SIMD4<Scalar> { SIMD4<Scalar>(t, s, p, s) }
  public var tspt: SIMD4<Scalar> { SIMD4<Scalar>(t, s, p, t) }
  public var tspp: SIMD4<Scalar> { SIMD4<Scalar>(t, s, p, p) }
  public var tspq: SIMD4<Scalar> { SIMD4<Scalar>(t, s, p, q) }
  public var tsqs: SIMD4<Scalar> { SIMD4<Scalar>(t, s, q, s) }
  public var tsqt: SIMD4<Scalar> { SIMD4<Scalar>(t, s, q, t) }
  public var tsqp: SIMD4<Scalar> { SIMD4<Scalar>(t, s, q, p) }
  public var tsqq: SIMD4<Scalar> { SIMD4<Scalar>(t, s, q, q) }
  public var ttss: SIMD4<Scalar> { SIMD4<Scalar>(t, t, s, s) }
  public var ttst: SIMD4<Scalar> { SIMD4<Scalar>(t, t, s, t) }
  public var ttsp: SIMD4<Scalar> { SIMD4<Scalar>(t, t, s, p) }
  public var ttsq: SIMD4<Scalar> { SIMD4<Scalar>(t, t, s, q) }
  public var ttts: SIMD4<Scalar> { SIMD4<Scalar>(t, t, t, s) }
  public var tttt: SIMD4<Scalar> { SIMD4<Scalar>(t, t, t, t) }
  public var tttp: SIMD4<Scalar> { SIMD4<Scalar>(t, t, t, p) }
  public var tttq: SIMD4<Scalar> { SIMD4<Scalar>(t, t, t, q) }
  public var ttps: SIMD4<Scalar> { SIMD4<Scalar>(t, t, p, s) }
  public var ttpt: SIMD4<Scalar> { SIMD4<Scalar>(t, t, p, t) }
  public var ttpp: SIMD4<Scalar> { SIMD4<Scalar>(t, t, p, p) }
  public var ttpq: SIMD4<Scalar> { SIMD4<Scalar>(t, t, p, q) }
  public var ttqs: SIMD4<Scalar> { SIMD4<Scalar>(t, t, q, s) }
  public var ttqt: SIMD4<Scalar> { SIMD4<Scalar>(t, t, q, t) }
  public var ttqp: SIMD4<Scalar> { SIMD4<Scalar>(t, t, q, p) }
  public var ttqq: SIMD4<Scalar> { SIMD4<Scalar>(t, t, q, q) }
  public var tpss: SIMD4<Scalar> { SIMD4<Scalar>(t, p, s, s) }
  public var tpst: SIMD4<Scalar> { SIMD4<Scalar>(t, p, s, t) }
  public var tpsp: SIMD4<Scalar> { SIMD4<Scalar>(t, p, s, p) }
  public var tpsq: SIMD4<Scalar> { SIMD4<Scalar>(t, p, s, q) }
  public var tpts: SIMD4<Scalar> { SIMD4<Scalar>(t, p, t, s) }
  public var tptt: SIMD4<Scalar> { SIMD4<Scalar>(t, p, t, t) }
  public var tptp: SIMD4<Scalar> { SIMD4<Scalar>(t, p, t, p) }
  public var tptq: SIMD4<Scalar> { SIMD4<Scalar>(t, p, t, q) }
  public var tpps: SIMD4<Scalar> { SIMD4<Scalar>(t, p, p, s) }
  public var tppt: SIMD4<Scalar> { SIMD4<Scalar>(t, p, p, t) }
  public var tppp: SIMD4<Scalar> { SIMD4<Scalar>(t, p, p, p) }
  public var tppq: SIMD4<Scalar> { SIMD4<Scalar>(t, p, p, q) }
  public var tpqs: SIMD4<Scalar> { SIMD4<Scalar>(t, p, q, s) }
  public var tpqt: SIMD4<Scalar> { SIMD4<Scalar>(t, p, q, t) }
  public var tpqp: SIMD4<Scalar> { SIMD4<Scalar>(t, p, q, p) }
  public var tpqq: SIMD4<Scalar> { SIMD4<Scalar>(t, p, q, q) }
  public var tqss: SIMD4<Scalar> { SIMD4<Scalar>(t, q, s, s) }
  public var tqst: SIMD4<Scalar> { SIMD4<Scalar>(t, q, s, t) }
  public var tqsp: SIMD4<Scalar> { SIMD4<Scalar>(t, q, s, p) }
  public var tqsq: SIMD4<Scalar> { SIMD4<Scalar>(t, q, s, q) }
  public var tqts: SIMD4<Scalar> { SIMD4<Scalar>(t, q, t, s) }
  public var tqtt: SIMD4<Scalar> { SIMD4<Scalar>(t, q, t, t) }
  public var tqtp: SIMD4<Scalar> { SIMD4<Scalar>(t, q, t, p) }
  public var tqtq: SIMD4<Scalar> { SIMD4<Scalar>(t, q, t, q) }
  public var tqps: SIMD4<Scalar> { SIMD4<Scalar>(t, q, p, s) }
  public var tqpt: SIMD4<Scalar> { SIMD4<Scalar>(t, q, p, t) }
  public var tqpp: SIMD4<Scalar> { SIMD4<Scalar>(t, q, p, p) }
  public var tqpq: SIMD4<Scalar> { SIMD4<Scalar>(t, q, p, q) }
  public var tqqs: SIMD4<Scalar> { SIMD4<Scalar>(t, q, q, s) }
  public var tqqt: SIMD4<Scalar> { SIMD4<Scalar>(t, q, q, t) }
  public var tqqp: SIMD4<Scalar> { SIMD4<Scalar>(t, q, q, p) }
  public var tqqq: SIMD4<Scalar> { SIMD4<Scalar>(t, q, q, q) }
  public var psss: SIMD4<Scalar> { SIMD4<Scalar>(p, s, s, s) }
  public var psst: SIMD4<Scalar> { SIMD4<Scalar>(p, s, s, t) }
  public var pssp: SIMD4<Scalar> { SIMD4<Scalar>(p, s, s, p) }
  public var pssq: SIMD4<Scalar> { SIMD4<Scalar>(p, s, s, q) }
  public var psts: SIMD4<Scalar> { SIMD4<Scalar>(p, s, t, s) }
  public var pstt: SIMD4<Scalar> { SIMD4<Scalar>(p, s, t, t) }
  public var pstp: SIMD4<Scalar> { SIMD4<Scalar>(p, s, t, p) }
  public var pstq: SIMD4<Scalar> { SIMD4<Scalar>(p, s, t, q) }
  public var psps: SIMD4<Scalar> { SIMD4<Scalar>(p, s, p, s) }
  public var pspt: SIMD4<Scalar> { SIMD4<Scalar>(p, s, p, t) }
  public var pspp: SIMD4<Scalar> { SIMD4<Scalar>(p, s, p, p) }
  public var pspq: SIMD4<Scalar> { SIMD4<Scalar>(p, s, p, q) }
  public var psqs: SIMD4<Scalar> { SIMD4<Scalar>(p, s, q, s) }
  public var psqt: SIMD4<Scalar> { SIMD4<Scalar>(p, s, q, t) }
  public var psqp: SIMD4<Scalar> { SIMD4<Scalar>(p, s, q, p) }
  public var psqq: SIMD4<Scalar> { SIMD4<Scalar>(p, s, q, q) }
  public var ptss: SIMD4<Scalar> { SIMD4<Scalar>(p, t, s, s) }
  public var ptst: SIMD4<Scalar> { SIMD4<Scalar>(p, t, s, t) }
  public var ptsp: SIMD4<Scalar> { SIMD4<Scalar>(p, t, s, p) }
  public var ptsq: SIMD4<Scalar> { SIMD4<Scalar>(p, t, s, q) }
  public var ptts: SIMD4<Scalar> { SIMD4<Scalar>(p, t, t, s) }
  public var pttt: SIMD4<Scalar> { SIMD4<Scalar>(p, t, t, t) }
  public var pttp: SIMD4<Scalar> { SIMD4<Scalar>(p, t, t, p) }
  public var pttq: SIMD4<Scalar> { SIMD4<Scalar>(p, t, t, q) }
  public var ptps: SIMD4<Scalar> { SIMD4<Scalar>(p, t, p, s) }
  public var ptpt: SIMD4<Scalar> { SIMD4<Scalar>(p, t, p, t) }
  public var ptpp: SIMD4<Scalar> { SIMD4<Scalar>(p, t, p, p) }
  public var ptpq: SIMD4<Scalar> { SIMD4<Scalar>(p, t, p, q) }
  public var ptqs: SIMD4<Scalar> { SIMD4<Scalar>(p, t, q, s) }
  public var ptqt: SIMD4<Scalar> { SIMD4<Scalar>(p, t, q, t) }
  public var ptqp: SIMD4<Scalar> { SIMD4<Scalar>(p, t, q, p) }
  public var ptqq: SIMD4<Scalar> { SIMD4<Scalar>(p, t, q, q) }
  public var ppss: SIMD4<Scalar> { SIMD4<Scalar>(p, p, s, s) }
  public var ppst: SIMD4<Scalar> { SIMD4<Scalar>(p, p, s, t) }
  public var ppsp: SIMD4<Scalar> { SIMD4<Scalar>(p, p, s, p) }
  public var ppsq: SIMD4<Scalar> { SIMD4<Scalar>(p, p, s, q) }
  public var ppts: SIMD4<Scalar> { SIMD4<Scalar>(p, p, t, s) }
  public var pptt: SIMD4<Scalar> { SIMD4<Scalar>(p, p, t, t) }
  public var pptp: SIMD4<Scalar> { SIMD4<Scalar>(p, p, t, p) }
  public var pptq: SIMD4<Scalar> { SIMD4<Scalar>(p, p, t, q) }
  public var ppps: SIMD4<Scalar> { SIMD4<Scalar>(p, p, p, s) }
  public var pppt: SIMD4<Scalar> { SIMD4<Scalar>(p, p, p, t) }
  public var pppp: SIMD4<Scalar> { SIMD4<Scalar>(p, p, p, p) }
  public var pppq: SIMD4<Scalar> { SIMD4<Scalar>(p, p, p, q) }
  public var ppqs: SIMD4<Scalar> { SIMD4<Scalar>(p, p, q, s) }
  public var ppqt: SIMD4<Scalar> { SIMD4<Scalar>(p, p, q, t) }
  public var ppqp: SIMD4<Scalar> { SIMD4<Scalar>(p, p, q, p) }
  public var ppqq: SIMD4<Scalar> { SIMD4<Scalar>(p, p, q, q) }
  public var pqss: SIMD4<Scalar> { SIMD4<Scalar>(p, q, s, s) }
  public var pqst: SIMD4<Scalar> { SIMD4<Scalar>(p, q, s, t) }
  public var pqsp: SIMD4<Scalar> { SIMD4<Scalar>(p, q, s, p) }
  public var pqsq: SIMD4<Scalar> { SIMD4<Scalar>(p, q, s, q) }
  public var pqts: SIMD4<Scalar> { SIMD4<Scalar>(p, q, t, s) }
  public var pqtt: SIMD4<Scalar> { SIMD4<Scalar>(p, q, t, t) }
  public var pqtp: SIMD4<Scalar> { SIMD4<Scalar>(p, q, t, p) }
  public var pqtq: SIMD4<Scalar> { SIMD4<Scalar>(p, q, t, q) }
  public var pqps: SIMD4<Scalar> { SIMD4<Scalar>(p, q, p, s) }
  public var pqpt: SIMD4<Scalar> { SIMD4<Scalar>(p, q, p, t) }
  public var pqpp: SIMD4<Scalar> { SIMD4<Scalar>(p, q, p, p) }
  public var pqpq: SIMD4<Scalar> { SIMD4<Scalar>(p, q, p, q) }
  public var pqqs: SIMD4<Scalar> { SIMD4<Scalar>(p, q, q, s) }
  public var pqqt: SIMD4<Scalar> { SIMD4<Scalar>(p, q, q, t) }
  public var pqqp: SIMD4<Scalar> { SIMD4<Scalar>(p, q, q, p) }
  public var pqqq: SIMD4<Scalar> { SIMD4<Scalar>(p, q, q, q) }
  public var qsss: SIMD4<Scalar> { SIMD4<Scalar>(q, s, s, s) }
  public var qsst: SIMD4<Scalar> { SIMD4<Scalar>(q, s, s, t) }
  public var qssp: SIMD4<Scalar> { SIMD4<Scalar>(q, s, s, p) }
  public var qssq: SIMD4<Scalar> { SIMD4<Scalar>(q, s, s, q) }
  public var qsts: SIMD4<Scalar> { SIMD4<Scalar>(q, s, t, s) }
  public var qstt: SIMD4<Scalar> { SIMD4<Scalar>(q, s, t, t) }
  public var qstp: SIMD4<Scalar> { SIMD4<Scalar>(q, s, t, p) }
  public var qstq: SIMD4<Scalar> { SIMD4<Scalar>(q, s, t, q) }
  public var qsps: SIMD4<Scalar> { SIMD4<Scalar>(q, s, p, s) }
  public var qspt: SIMD4<Scalar> { SIMD4<Scalar>(q, s, p, t) }
  public var qspp: SIMD4<Scalar> { SIMD4<Scalar>(q, s, p, p) }
  public var qspq: SIMD4<Scalar> { SIMD4<Scalar>(q, s, p, q) }
  public var qsqs: SIMD4<Scalar> { SIMD4<Scalar>(q, s, q, s) }
  public var qsqt: SIMD4<Scalar> { SIMD4<Scalar>(q, s, q, t) }
  public var qsqp: SIMD4<Scalar> { SIMD4<Scalar>(q, s, q, p) }
  public var qsqq: SIMD4<Scalar> { SIMD4<Scalar>(q, s, q, q) }
  public var qtss: SIMD4<Scalar> { SIMD4<Scalar>(q, t, s, s) }
  public var qtst: SIMD4<Scalar> { SIMD4<Scalar>(q, t, s, t) }
  public var qtsp: SIMD4<Scalar> { SIMD4<Scalar>(q, t, s, p) }
  public var qtsq: SIMD4<Scalar> { SIMD4<Scalar>(q, t, s, q) }
  public var qtts: SIMD4<Scalar> { SIMD4<Scalar>(q, t, t, s) }
  public var qttt: SIMD4<Scalar> { SIMD4<Scalar>(q, t, t, t) }
  public var qttp: SIMD4<Scalar> { SIMD4<Scalar>(q, t, t, p) }
  public var qttq: SIMD4<Scalar> { SIMD4<Scalar>(q, t, t, q) }
  public var qtps: SIMD4<Scalar> { SIMD4<Scalar>(q, t, p, s) }
  public var qtpt: SIMD4<Scalar> { SIMD4<Scalar>(q, t, p, t) }
  public var qtpp: SIMD4<Scalar> { SIMD4<Scalar>(q, t, p, p) }
  public var qtpq: SIMD4<Scalar> { SIMD4<Scalar>(q, t, p, q) }
  public var qtqs: SIMD4<Scalar> { SIMD4<Scalar>(q, t, q, s) }
  public var qtqt: SIMD4<Scalar> { SIMD4<Scalar>(q, t, q, t) }
  public var qtqp: SIMD4<Scalar> { SIMD4<Scalar>(q, t, q, p) }
  public var qtqq: SIMD4<Scalar> { SIMD4<Scalar>(q, t, q, q) }
  public var qpss: SIMD4<Scalar> { SIMD4<Scalar>(q, p, s, s) }
  public var qpst: SIMD4<Scalar> { SIMD4<Scalar>(q, p, s, t) }
  public var qpsp: SIMD4<Scalar> { SIMD4<Scalar>(q, p, s, p) }
  public var qpsq: SIMD4<Scalar> { SIMD4<Scalar>(q, p, s, q) }
  public var qpts: SIMD4<Scalar> { SIMD4<Scalar>(q, p, t, s) }
  public var qptt: SIMD4<Scalar> { SIMD4<Scalar>(q, p, t, t) }
  public var qptp: SIMD4<Scalar> { SIMD4<Scalar>(q, p, t, p) }
  public var qptq: SIMD4<Scalar> { SIMD4<Scalar>(q, p, t, q) }
  public var qpps: SIMD4<Scalar> { SIMD4<Scalar>(q, p, p, s) }
  public var qppt: SIMD4<Scalar> { SIMD4<Scalar>(q, p, p, t) }
  public var qppp: SIMD4<Scalar> { SIMD4<Scalar>(q, p, p, p) }
  public var qppq: SIMD4<Scalar> { SIMD4<Scalar>(q, p, p, q) }
  public var qpqs: SIMD4<Scalar> { SIMD4<Scalar>(q, p, q, s) }
  public var qpqt: SIMD4<Scalar> { SIMD4<Scalar>(q, p, q, t) }
  public var qpqp: SIMD4<Scalar> { SIMD4<Scalar>(q, p, q, p) }
  public var qpqq: SIMD4<Scalar> { SIMD4<Scalar>(q, p, q, q) }
  public var qqss: SIMD4<Scalar> { SIMD4<Scalar>(q, q, s, s) }
  public var qqst: SIMD4<Scalar> { SIMD4<Scalar>(q, q, s, t) }
  public var qqsp: SIMD4<Scalar> { SIMD4<Scalar>(q, q, s, p) }
  public var qqsq: SIMD4<Scalar> { SIMD4<Scalar>(q, q, s, q) }
  public var qqts: SIMD4<Scalar> { SIMD4<Scalar>(q, q, t, s) }
  public var qqtt: SIMD4<Scalar> { SIMD4<Scalar>(q, q, t, t) }
  public var qqtp: SIMD4<Scalar> { SIMD4<Scalar>(q, q, t, p) }
  public var qqtq: SIMD4<Scalar> { SIMD4<Scalar>(q, q, t, q) }
  public var qqps: SIMD4<Scalar> { SIMD4<Scalar>(q, q, p, s) }
  public var qqpt: SIMD4<Scalar> { SIMD4<Scalar>(q, q, p, t) }
  public var qqpp: SIMD4<Scalar> { SIMD4<Scalar>(q, q, p, p) }
  public var qqpq: SIMD4<Scalar> { SIMD4<Scalar>(q, q, p, q) }
  public var qqqs: SIMD4<Scalar> { SIMD4<Scalar>(q, q, q, s) }
  public var qqqt: SIMD4<Scalar> { SIMD4<Scalar>(q, q, q, t) }
  public var qqqp: SIMD4<Scalar> { SIMD4<Scalar>(q, q, q, p) }
  public var qqqq: SIMD4<Scalar> { SIMD4<Scalar>(q, q, q, q) }

}

